/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package game;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.*;
import java.awt.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JPanel;

/**
 *
 * @author bernardo
 */
public class MazeForm extends javax.swing.JFrame {

    private LabirintoPanel labirintoPanel = new LabirintoPanel();
    private JButton moverButton;
    /**
     * Creates new form MazeForm
     */

    private int jogadorLinha = 1;
    private int jogadorColuna = 1;

    private static final int TAMANHO_CELULA = 30;

    public MazeForm() {
        initComponents();
        labirintoPanel = new LabirintoPanel();
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(labirintoPanel, BorderLayout.CENTER);

        // Cria um botão para mover
        moverButton = new JButton("Mover");
        getContentPane().add(moverButton, BorderLayout.SOUTH);

        // Adiciona um ouvinte de ação para o botão
        moverButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                moverJogador();
            }
        });

        // Adiciona um ouvinte de teclado para as teclas WASD
        addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                // Não é necessário para este exemplo
            }

            @Override
            public void keyPressed(KeyEvent e) {
                moverComTeclas(e.getKeyChar());
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // Não é necessário para este exemplo
            }
        });

        // Torna o JFrame focável para que as teclas sejam detectadas
        setFocusable(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
    }

    private void moverComTeclas(char tecla) {
        // Lógica para verificar qual tecla foi pressionada e mover o jogador
        int proximaLinha = jogadorLinha;
        int proximaColuna = jogadorColuna;

        switch (tecla) {
            case 'W':
                proximaLinha--;
                break;
            case 'A':
                proximaColuna--;
                break;
            case 'S':
                proximaLinha++;
                break;
            case 'D':
                proximaColuna++;
                break;
            default:
                // Tecla inválida
                return;
        }
        if (labirintoPanel.ehCaminhoValido(proximaLinha, proximaColuna)) {
            // Move o jogador para a próxima posição
            jogadorLinha = proximaLinha;
            jogadorColuna = proximaColuna;

            // Atualiza a posição do botão
            int x = jogadorColuna * TAMANHO_CELULA;
            int y = jogadorLinha * TAMANHO_CELULA;
            moverButton.setBounds(x, y, moverButton.getWidth(), moverButton.getHeight());

            // Redesenha o painel do labirinto
            labirintoPanel.repaint();
        }
    }

    private void moverJogador() {
        // Lógica para verificar se a próxima posição é válida antes de mover o jogador
        int proximaLinha = jogadorLinha + 1;
        int proximaColuna = jogadorColuna;

        if (labirintoPanel.ehCaminhoValido(proximaLinha, proximaColuna)) {
            // Move o jogador para a próxima posição
            jogadorLinha = proximaLinha;
            jogadorColuna = proximaColuna;

            // Atualiza a posição do botão
            int x = jogadorColuna * TAMANHO_CELULA;
            int y = jogadorLinha * TAMANHO_CELULA;
            moverButton.setBounds(x, y, moverButton.getWidth(), moverButton.getHeight());

            // Redesenha o painel do labirinto
            labirintoPanel.repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            MazeForm mazeForm = new MazeForm();
            mazeForm.setVisible(true);
            mazeForm.requestFocusInWindow(); // Torna o JFrame focável para que as teclas sejam detectadas
        });
    }

    class LabirintoPanel extends JPanel {

        private static final int TAMANHO_CELULA = 20;
        private static final int LINHAS = 20;
        private static final int COLUNAS = 20;

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            // Desenha o labirinto
            for (int linha = 0; linha < labirinto.length; linha++) {
                for (int coluna = 0; coluna < labirinto[0].length; coluna++) {
                    if (labirinto[linha][coluna] == 1) { // 1 representa uma parede
                        g.setColor(Color.BLACK);
                        g.fillRect(coluna * TAMANHO_CELULA, linha * TAMANHO_CELULA, TAMANHO_CELULA, TAMANHO_CELULA);
                    } else { // 0 representa um caminho
                        g.setColor(Color.WHITE);
                        g.fillRect(coluna * TAMANHO_CELULA, linha * TAMANHO_CELULA, TAMANHO_CELULA, TAMANHO_CELULA);
                        g.setColor(Color.BLACK);
                        g.drawRect(coluna * TAMANHO_CELULA, linha * TAMANHO_CELULA, TAMANHO_CELULA, TAMANHO_CELULA);
                    }
                }
            }
            g.setColor(Color.RED);
            g.fillOval(jogadorColuna * TAMANHO_CELULA, jogadorLinha * TAMANHO_CELULA, TAMANHO_CELULA, TAMANHO_CELULA);
        }
        
        private int[][] labirinto = {
            {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
            {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
            {1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1},
            {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1},
            {1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1},
            {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1},
            {1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1},
            {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1},
            {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1},
            {1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
            {1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1},
            {1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1},
            {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1},
            {1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1},
            {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1},
            {1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1},
            {1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1},
            {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
        };

        public boolean ehCaminhoValido(int linha, int coluna) {
            return linha >= 0 && linha < labirinto.length
                    && coluna >= 0 && coluna < labirinto[0].length
                    && labirinto[linha][coluna] == 0; // 0 representa um caminho
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
